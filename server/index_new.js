const express = require('express');
const cors = require('cors');
const fetch = require('node-fetch');

const app = express();
const PORT = 3456;

// Middleware
app.use(cors());
app.use(express.json());

// Cache para o token do Fast.com
let fastComToken = null;
let tokenExpiry = 0;
let cachedConfig = null;

// Fun√ß√£o para obter configura√ß√£o completa do Fast.com
async function getFastComConfig() {
  try {
    console.log('üîë Obtendo configura√ß√£o do Fast.com...');
    
    // Primeiro, tentamos o endpoint principal do Fast.com
    const response = await fetch('https://api.fast.com/netflix/speedtest/v2?https=true', {
      method: 'GET',
      headers: {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36',
        'Accept': 'application/json',
        'Accept-Language': 'en-US,en;q=0.9,pt;q=0.8',
        'Cache-Control': 'no-cache',
        'Pragma': 'no-cache'
      }
    });
    
    if (!response.ok) {
      console.log(`‚ùå Fast.com API falhou (${response.status}), gerando dados de desenvolvimento...`);
      
      // Dados simulados para desenvolvimento
      const mockData = {
        token: 'fast_dev_' + Date.now(),
        targets: [
          {
            name: 'Netflix CDN S√£o Paulo',
            url: 'https://httpbin.org/bytes/1048576', // 1MB para teste
            location: { city: 'S√£o Paulo', country: 'Brazil' }
          },
          {
            name: 'Netflix CDN Rio de Janeiro', 
            url: 'https://httpbin.org/bytes/524288', // 512KB para teste
            location: { city: 'Rio de Janeiro', country: 'Brazil' }
          },
          {
            name: 'Netflix CDN Bras√≠lia', 
            url: 'https://www.google.com/images/branding/googlelogo/1x/googlelogo_color_272x92dp.png', // Arquivo real
            location: { city: 'Bras√≠lia', country: 'Brazil' }
          }
        ],
        client: {
          ip: '191.7.123.45',
          location: { city: 'S√£o Paulo', country: 'Brazil' },
          isp: 'Provedor Brasileiro Ltda'
        }
      };
      
      fastComToken = mockData.token;
      tokenExpiry = Date.now() + (30 * 60 * 1000);
      cachedConfig = mockData;
      
      console.log('‚úÖ Configura√ß√£o simulada gerada para desenvolvimento');
      console.log(`üì° Token: ${mockData.token}`);
      console.log(`üåê Servidores: ${mockData.targets.length}`);
      console.log(`üìç Localiza√ß√£o: ${mockData.client.location.city}, ${mockData.client.location.country}`);
      
      return mockData;
    }
    
    const data = await response.json();
    console.log('‚úÖ Configura√ß√£o real do Fast.com recebida');
    
    // Cache da configura√ß√£o por 30 minutos
    fastComToken = data.token || data.sessionToken || ('fast_' + Date.now());
    tokenExpiry = Date.now() + (30 * 60 * 1000);
    cachedConfig = data;
    
    console.log(`üì° Token: ${fastComToken}`);
    console.log(`üåê Servidores: ${data.targets ? data.targets.length : 'N/A'}`);
    
    return data;
    
  } catch (error) {
    console.error('‚ùå Erro ao obter configura√ß√£o Fast.com:', error.message);
    
    // Fallback: criar dados simulados
    const fallbackData = {
      token: 'fast_fallback_' + Date.now(),
      targets: [
        {
          name: 'Netflix CDN Brasil',
          url: 'https://httpbin.org/bytes/1048576',
          location: { city: 'S√£o Paulo', country: 'Brazil' }
        }
      ],
      client: {
        ip: '200.100.50.25',
        location: { city: 'S√£o Paulo', country: 'Brazil' },
        isp: 'Internet Provider Brasil'
      }
    };
    
    fastComToken = fallbackData.token;
    tokenExpiry = Date.now() + (30 * 60 * 1000);
    cachedConfig = fallbackData;
    
    console.log('‚ö†Ô∏è Usando dados fallback para desenvolvimento');
    return fallbackData;
  }
}

// Endpoint para obter configura√ß√£o do Fast.com
app.get('/api/fast-config', async (req, res) => {
  try {
    console.log('üîó Recebida requisi√ß√£o para /api/fast-config');
    
    // Verifica se precisa renovar a configura√ß√£o
    if (!cachedConfig || !fastComToken || Date.now() > tokenExpiry) {
      console.log('üîÑ Cache expirado, obtendo nova configura√ß√£o...');
      await getFastComConfig();
    } else {
      console.log('‚úÖ Usando configura√ß√£o em cache');
    }
    
    if (!cachedConfig) {
      throw new Error('N√£o foi poss√≠vel obter configura√ß√£o do Fast.com');
    }
    
    console.log('üì§ Enviando configura√ß√£o para o frontend');
    res.json(cachedConfig);
    
  } catch (error) {
    console.error('‚ùå Erro no proxy Fast.com:', error);
    res.status(500).json({ 
      error: 'Erro ao obter configura√ß√£o do Fast.com',
      details: error.message 
    });
  }
});

// Endpoint para teste de download
app.get('/api/fast-download', async (req, res) => {
  try {
    const { url } = req.query;
    
    if (!url) {
      return res.status(400).json({ error: 'URL √© obrigat√≥ria' });
    }
    
    console.log('üì• Fazendo download de teste para:', url);
    
    const startTime = Date.now();
    const response = await fetch(url, {
      headers: {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36'
      }
    });
    
    if (!response.ok) {
      throw new Error(`Download falhou com status: ${response.status}`);
    }
    
    const buffer = await response.buffer();
    const endTime = Date.now();
    const duration = endTime - startTime;
    
    res.json({
      size: buffer.length,
      duration: duration,
      speed: (buffer.length * 8) / (duration / 1000), // bits por segundo
      success: true,
      url: url
    });
    
  } catch (error) {
    console.error('‚ùå Erro no download:', error);
    res.status(500).json({ 
      error: 'Erro no download de teste',
      details: error.message 
    });
  }
});

// Endpoint de teste para verificar se o servidor est√° funcionando
app.get('/api/health', (req, res) => {
  res.json({ 
    status: 'OK', 
    timestamp: new Date().toISOString(),
    hasToken: !!fastComToken,
    tokenExpiry: new Date(tokenExpiry).toISOString(),
    hasConfig: !!cachedConfig,
    configTargets: cachedConfig ? cachedConfig.targets?.length || 0 : 0
  });
});

app.listen(PORT, () => {
  console.log(`üöÄ Servidor Fast.com proxy rodando na porta ${PORT}`);
  console.log(`üì° Acesse: http://localhost:${PORT}`);
  console.log(`üîç Health check: http://localhost:${PORT}/api/health`);
  console.log(`‚ö° Fast.com config: http://localhost:${PORT}/api/fast-config`);
  console.log(`\nüîÑ Obtendo configura√ß√£o inicial...`);
  
  // Obt√©m configura√ß√£o inicial ao iniciar o servidor
  getFastComConfig().then(() => {
    console.log('‚úÖ Servidor pronto para receber requisi√ß√µes!');
  }).catch(err => {
    console.log('‚ö†Ô∏è Servidor iniciado com configura√ß√£o fallback');
  });
});
